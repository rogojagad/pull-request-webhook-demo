{"version":3,"sources":["../src/service.js"],"names":["PLEASE_REVIEW_QUERY","parseRequestBody","comment","pullrequest","content","raw","user","displayName","reviewers","isPleaseReviewRequest","startsWith","reviewerIds","Array","reviewer","push","accountId","isReviewRequest","commenterName","sendMessageToAllReviewers","users","pullRequest","botClient","TelegramBotClient","getInstance","forEach","sendMessage","data","User","ATTRIBUTE_CHAT_ID","ATTRIBUTE_NAME","createOneUser","chatId","bitbucketId","username","existingData","repository","readOneUserByBitbucketId","isNotAlreadyExists","undefined","dataObj","Object","ATTRIBUTE_BITBUCKET_ID","result","UserAlreadyExistsException"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,mBAAmB,GAAG,eAA5B;;AAEA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmCC,WAAnC,EAAgD;AAC5C,QAAM;AACFC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF,KADP;AAEFC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAFJ,MAGFL,OAHJ;AAKA,QAAM;AAAEM,IAAAA;AAAF,MAAgBL,WAAtB;AACA,QAAMM,qBAAqB,GAAGJ,GAAG,CAACK,UAAJ,CAAeV,mBAAf,CAA9B;AACA,QAAMW,WAAW,GAAGC,KAAK,EAAzB;;AAEA,MAAIH,qBAAJ,EAA2B;AACvB,SAAK,IAAII,QAAT,IAAqBL,SAArB,EAAgC;AAC5BG,MAAAA,WAAW,CAACG,IAAZ,CAAiBD,QAAQ,CAACE,SAA1B;AACH;AACJ;;AAED,SAAO;AACHC,IAAAA,eAAe,EAAEP,qBADd;AAEHQ,IAAAA,aAAa,EAAEV,WAFZ;AAGHI,IAAAA,WAAW,EAAEA;AAHV,GAAP;AAKH;;AAED,eAAeO,yBAAf,CAAyCC,KAAzC,EAAgDC,WAAhD,EAA6DH,aAA7D,EAA4E;AACxE,QAAMI,SAAS,GAAG,IAAIC,eAAJ,GAAwBC,WAAxB,EAAlB;AAEAJ,EAAAA,KAAK,CAACK,OAAN,CAAelB,IAAD,IAAU;AACpBe,IAAAA,SAAS,CAACI,WAAV,CACInB,IAAI,CAACoB,IAAL,GAAYC,cAAKC,iBAAjB,CADJ,EAEI,+BACItB,IAAI,CAACoB,IAAL,GAAYC,cAAKE,cAAjB,CADJ,EAEIT,WAFJ,EAGIH,aAHJ,CAFJ;AAQH,GATD;AAUH;;AAED,eAAea,aAAf,CAA6BC,MAA7B,EAAqCC,WAArC,EAAkDC,QAAlD,EAA4D;AACxD,QAAMC,YAAY,GAAG,MAAMC,UAAU,CAACC,wBAAX,CAAoCJ,WAApC,CAA3B;AACA,QAAMK,kBAAkB,GAAGH,YAAY,CAACR,IAAb,OAAwBY,SAAnD;;AAEA,MAAID,kBAAJ,EAAwB;AACpB,UAAME,OAAO,GAAGC,MAAM,EAAtB;AAEAD,IAAAA,OAAO,CAACZ,cAAKc,sBAAN,CAAP,GAAuCT,WAAvC;AACAO,IAAAA,OAAO,CAACZ,cAAKC,iBAAN,CAAP,GAAkCG,MAAlC;AACAQ,IAAAA,OAAO,CAACZ,cAAKE,cAAN,CAAP,GAA+BI,QAA/B;AAEA,UAAMS,MAAM,GAAG,MAAMP,UAAU,CAACL,aAAX,CAAyBS,OAAzB,CAArB;AACA,WAAOG,MAAP;AACH;;AAED,QAAM,IAAIC,mCAAJ,CAA+BT,YAA/B,CAAN;AACH","sourcesContent":["import { constructMessage } from \"./message/factory\";\nimport * as repository from \"./repository\";\nimport TelegramBotClient from \"./bot/client\";\nimport User from \"./const/User\";\nimport UserAlreadyExistsException from \"./exception/UserAlreadyExistsException\";\n\nconst PLEASE_REVIEW_QUERY = \"please review\";\n\nfunction parseRequestBody(comment, pullrequest) {\n    const {\n        content: { raw },\n        user: { displayName },\n    } = comment;\n\n    const { reviewers } = pullrequest;\n    const isPleaseReviewRequest = raw.startsWith(PLEASE_REVIEW_QUERY);\n    const reviewerIds = Array();\n\n    if (isPleaseReviewRequest) {\n        for (let reviewer of reviewers) {\n            reviewerIds.push(reviewer.accountId);\n        }\n    }\n\n    return {\n        isReviewRequest: isPleaseReviewRequest,\n        commenterName: displayName,\n        reviewerIds: reviewerIds,\n    };\n}\n\nasync function sendMessageToAllReviewers(users, pullRequest, commenterName) {\n    const botClient = new TelegramBotClient().getInstance();\n\n    users.forEach((user) => {\n        botClient.sendMessage(\n            user.data()[User.ATTRIBUTE_CHAT_ID],\n            constructMessage(\n                user.data()[User.ATTRIBUTE_NAME],\n                pullRequest,\n                commenterName\n            )\n        );\n    });\n}\n\nasync function createOneUser(chatId, bitbucketId, username) {\n    const existingData = await repository.readOneUserByBitbucketId(bitbucketId);\n    const isNotAlreadyExists = existingData.data() === undefined;\n\n    if (isNotAlreadyExists) {\n        const dataObj = Object();\n\n        dataObj[User.ATTRIBUTE_BITBUCKET_ID] = bitbucketId;\n        dataObj[User.ATTRIBUTE_CHAT_ID] = chatId;\n        dataObj[User.ATTRIBUTE_NAME] = username;\n\n        const result = await repository.createOneUser(dataObj);\n        return result;\n    }\n\n    throw new UserAlreadyExistsException(existingData);\n}\n\nexport { createOneUser, sendMessageToAllReviewers, parseRequestBody };\n"],"file":"service.js"}