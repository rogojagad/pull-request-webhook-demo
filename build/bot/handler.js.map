{"version":3,"sources":["../../src/bot/handler.js"],"names":["handleRegisterCommand","msg","message","botClient","TelegramBotClient","getInstance","from","firstName","lastName","chat","id","fullname","sendMessage","bitbucketIdQuery","reply_markup","JSON","stringify","force_reply","reply","Promise","resolve","onReplyToMessage","message_id","bitbucketId","text","service","createOneUser","error","console","UserAlreadyExistsException"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,eAAeA,qBAAf,CAAqCC,GAArC,EAA0C;AACtC,QAAMC,OAAO,GAAG,mCAAuBD,GAAvB,CAAhB;AACA,QAAME,SAAS,GAAG,IAAIC,eAAJ,GAAwBC,WAAxB,EAAlB;AAEA,QAAM;AACFC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KADJ;AAEFC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAFJ,MAGFR,OAHJ;AAKA,QAAMS,QAAQ,GAAI,GAAEJ,SAAU,IAAGC,QAAS,EAA1C;AAEAL,EAAAA,SAAS,CAACS,WAAV,CAAsBF,EAAtB,EAA2B,UAASC,QAAS,EAA7C;AACA,QAAME,gBAAgB,GAAG,MAAMV,SAAS,CAACS,WAAV,CAC3BF,EAD2B,EAE1B,oCAF0B,EAG3B;AACII,IAAAA,YAAY,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAf;AADlB,GAH2B,CAA/B;AAQA,QAAMC,KAAK,GAAG,MAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACzCjB,IAAAA,SAAS,CAACkB,gBAAV,CACIR,gBAAgB,CAACJ,IAAjB,CAAsBC,EAD1B,EAEIG,gBAAgB,CAACS,UAFrB,EAGIF,OAHJ;AAKH,GANmB,CAApB;AAQA,QAAMG,WAAW,GAAGL,KAAK,CAACM,IAA1B;AAEArB,EAAAA,SAAS,CAACS,WAAV,CAAsBF,EAAtB,EAA2B,uBAA3B;;AAEA,MAAI;AACA,UAAMe,iBAAQC,aAAR,CAAsBhB,EAAtB,EAA0Ba,WAA1B,EAAuCZ,QAAvC,CAAN;AACH,GAFD,CAEE,OAAOgB,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;;AACA,QAAIA,KAAK,YAAYE,mCAArB,EAAiD;AAC7C1B,MAAAA,SAAS,CAACS,WAAV,CACIF,EADJ,EAEK,0BAAyBa,WAAY,iBAF1C;AAIH;;AAED;AACH;;AAEDpB,EAAAA,SAAS,CAACS,WAAV,CAAsBF,EAAtB,EAA2B,+BAA3B;AACH","sourcesContent":["import { convertKeysToCamelCase } from \"./../utils\";\nimport service from \"./../service\";\nimport TelegramBotClient from \"./client\";\nimport UserAlreadyExistsException from \"./../exception/UserAlreadyExistsException\";\n\nasync function handleRegisterCommand(msg) {\n    const message = convertKeysToCamelCase(msg);\n    const botClient = new TelegramBotClient().getInstance();\n\n    const {\n        from: { firstName, lastName },\n        chat: { id },\n    } = message;\n\n    const fullname = `${firstName} ${lastName}`;\n\n    botClient.sendMessage(id, `Hello, ${fullname}`);\n    const bitbucketIdQuery = await botClient.sendMessage(\n        id,\n        `What is your Bitbucket Account ID?`,\n        {\n            reply_markup: JSON.stringify({ force_reply: true }),\n        }\n    );\n\n    const reply = await new Promise((resolve) => {\n        botClient.onReplyToMessage(\n            bitbucketIdQuery.chat.id,\n            bitbucketIdQuery.message_id,\n            resolve\n        );\n    });\n\n    const bitbucketId = reply.text;\n\n    botClient.sendMessage(id, `Registering your data`);\n\n    try {\n        await service.createOneUser(id, bitbucketId, fullname);\n    } catch (error) {\n        console.error(error);\n        if (error instanceof UserAlreadyExistsException) {\n            botClient.sendMessage(\n                id,\n                `User with Bitbucket ID ${bitbucketId} already exists`\n            );\n        }\n\n        return;\n    }\n\n    botClient.sendMessage(id, `Succesfuly register your data`);\n}\n\nexport { handleRegisterCommand };\n"],"file":"handler.js"}